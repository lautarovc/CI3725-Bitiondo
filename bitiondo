#! /usr/bin/ruby

=begin

bitiondo

Descripcion: Primera entrega del lenguaje de programacion Bitiondo

Autores:
	Lautaro Villalon. 12-10427
	Yarima Luciani. 13-10770

=end


require_relative 'Lexer.rb'
require_relative 'Parser.rb'
require_relative 'semanticAnalyzer.rb'
require_relative 'interpreter.rb'


def main
	ARGV[-1] =~ /\w+\.bto/

	# VERIFICACION DE EXTENSION DE ARCHIVO
	if $&.nil?
		puts "ExtensiÃ³n desconocida."
		return
	end

	# VERIFICACION DE EXISTENCIA DE ARCHIVO
	if (!File.exist?(ARGV[-1]))
		puts "Archivo no encontrado."
		return
	end

	*flags, file  = ARGV

	# LECTURA POR ARREGLO DE LINEAS DE ARCHIVO
	file = IO.readlines(ARGV[-1])

	# CORRIDA DEL LEXER
	lexer = Lexer.new(file)

	lexer.leer()

	# SI HAY ERRORES DE TOKENS, IMPRIME LOS ERRORES, CASO CONTRARIO, IMPRIME EL ARBOL SINTACTICO
	if (lexer.errorList.length > 0)
		for x in lexer.errorList
			x.toString()
		end

	else	
		parser = Parser.new(lexer)

		ast = parser.parse	

		semAnalyzer = AnalizadorSemantico.new(ast)

		semAnalyzer.analizar()

		# SI HAY ERRORES SEMANTICOS, IMPRIMIRLOS
		if (semAnalyzer.errores.length > 0)
			for x in semAnalyzer.errores
				x.to_s
			end

		else

			# IMPRESION DE TOKENS
			if flags.include?("-t") || flags.include?("--tokens") then
				for x in lexer.tokens
					x.toString()
				end			
			end

			# IMPRESION DE AST
			if (flags.include?("-a") || flags.include?("--ast")) && !(flags.include?("-s") || flags.include?("--symbols")) then
				ast.printNodo(0, false)
			end

			# IMPRESION AST CON TABLAS DE SIMBOLOS
			if flags.include?("-s") || flags.include?("--symbols") then
				ast.printNodo(0, true)
			end

			# CORRIDA DEL PROGRAMA
			if flags.length == 0 then
				interpretador = Interpretador.new(ast)
				interpretador.interpretar()
			end
		end
	end

end

main