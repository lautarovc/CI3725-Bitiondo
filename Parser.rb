#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "Lexer.rb"
require_relative "astParser.rb"

class SyntacticError < RuntimeError

    def initialize(token)
        @token = token
    end

    def to_s
        puts "SYNTACTIC ERROR FOUND:"
        if @token.eql? "$" then
            puts "Unexpected EOF"
        else
            puts "ERROR: unexpected token '#{@token.str}' at line #{@token.line}, column #{@token.column}"   
        end    
    end
end


class Parser < Racc::Parser

module_eval(<<'...end Parser.y/module_eval...', 'Parser.y', 228)

def initialize(lexer)
    @lexer = lexer
end

def on_error(id, token, stack)
	SyntacticError.new(token).to_s
	exit
    #raise SyntacticError::new(token)
end

def next_token
    if @lexer.haySiguiente then
        token = @lexer.tokenSiguiente;
        return [token.type, token]
    else
        return nil
    end
end

def parse
    do_parse
end


...end Parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    43,    48,    49,    50,    47,     2,   159,     9,    10,    11,
    46,    48,    49,    50,    47,   160,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    78,    79,    80,     3,    46,    58,    30,    59,    57,
    60,    42,    78,    79,    80,    31,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    48,    49,    50,    47,
    32,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,   162,   163,    30,    30,
    46,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    48,    49,    50,    47,    30,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    39,    40,    41,    30,    46,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    48,    49,    50,    47,
    62,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    48,    49,    50,    47,
    46,    48,    49,    50,    47,    46,    63,    68,    70,    72,
    46,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    58,    30,    59,    57,
    60,    48,    49,    50,    47,    73,    48,    49,    50,    47,
    46,   100,    30,   104,   106,    46,    78,    79,    80,    76,
    77,    93,    92,    81,    83,    82,    84,    85,    86,    89,
    91,    90,    87,    88,    78,    79,    80,    76,    77,    93,
    92,   -79,   -79,   -79,   -79,    57,    58,    30,    59,    57,
    60,    58,    30,    59,    57,    60,    78,    79,    80,    76,
    77,   108,    58,   133,    30,   132,    78,    79,    80,    76,
    77,    93,    92,    81,    83,    82,    84,    85,    86,    89,
    91,    90,    87,    88,    48,    49,    50,    47,   135,    48,
    49,    50,    47,    46,    48,    49,    50,    47,    46,    48,
    49,    50,    47,    46,   138,   142,   144,   146,    46,    78,
    79,    80,    76,    77,   149,   136,    78,    79,    80,    76,
    77,    93,    92,    81,    83,    82,    84,    85,    86,    58,
    30,    59,    57,    60,    58,    30,    59,    57,    60,    58,
    30,    59,    57,    60,    58,    30,    59,    57,    60,    78,
    79,    80,    76,    77,    93,    92,    81,    83,    82,    84,
    85,    86,    89,    91,    90,    87,    88,    48,    49,    50,
    47,   154,    59,   nil,   nil,   nil,    46,    78,    79,    80,
    76,    77,    93,    92,    81,    83,    82,    84,    85,    86,
    89,    91,    90,    87,    88,   nil,   nil,   nil,   152,   nil,
     2,     5,     9,    10,    11,    22,    23,    24,    25,   nil,
    26,    27,    58,    30,    59,    57,    60,    28,    29,   nil,
   nil,   nil,   nil,    30,   nil,   nil,   161,    78,    79,    80,
    76,    77,    93,    92,    81,    83,    82,    84,    85,    86,
    89,    91,    90,    87,    88,    78,    79,    80,    76,    77,
    93,    92,    81,    83,    82,    84,    85,    86,    89,    91,
    90,    87,    88,   nil,   nil,     2,   nil,   nil,   nil,   nil,
    22,    23,    24,    25,    94,    26,    27,   nil,   nil,   nil,
   nil,   nil,    28,    29,   nil,   nil,   nil,   nil,    30,   nil,
   nil,   150,    78,    79,    80,    76,    77,    93,    92,    81,
    83,    82,    84,    85,    86,    89,    91,    90,    87,    88,
    78,    79,    80,    76,    77,    93,    92,    81,    83,    82,
    84,    85,    86,    89,   158,    78,    79,    80,    76,    77,
    93,    92,    81,    83,    82,    84,    85,    86,    89,    91,
    90,    87,    88,   nil,   nil,   nil,   nil,   nil,   nil,   111,
   nil,   nil,   nil,   nil,   nil,   103,    78,    79,    80,    76,
    77,    93,    92,    81,    83,    82,    84,    85,    86,    89,
    91,    90,    87,    88,   137,   nil,   nil,   nil,   nil,   nil,
   nil,    78,    79,    80,    76,    77,    93,    92,    81,    83,
    82,    84,    85,    86,    89,    91,    90,    87,    88,   139,
   nil,   nil,   nil,   nil,   nil,   nil,    78,    79,    80,    76,
    77,    93,    92,    81,    83,    82,    84,    85,    86,    89,
    91,    90,    87,    88,     2,   nil,   nil,   nil,   nil,    22,
    23,    24,    25,   nil,    26,    27,   nil,   nil,   nil,   nil,
   nil,    28,    29,   nil,   nil,   nil,     2,    30,     9,    10,
    11,    22,    23,    24,    25,   nil,    26,    27,   nil,   nil,
   nil,   nil,   nil,    28,    29,   nil,   nil,   nil,     2,    30,
     9,    10,    11,    22,    23,    24,    25,   nil,    26,    27,
   nil,   nil,   nil,   nil,   nil,    28,    29,   nil,   nil,   nil,
     2,    30,     9,    10,    11,    22,    23,    24,    25,   nil,
    26,    27,   nil,   nil,   nil,   nil,   nil,    28,    29,   nil,
   nil,   nil,     2,    30,     9,    10,    11,    22,    23,    24,
    25,   nil,    26,    27,   nil,   nil,   nil,   nil,   nil,    28,
    29,   nil,   nil,   nil,     2,    30,     9,    10,    11,    22,
    23,    24,    25,   nil,    26,    27,   nil,   nil,   nil,   nil,
   nil,    28,    29,   nil,   nil,   nil,     2,    30,     9,    10,
    11,    22,    23,    24,    25,   nil,    26,    27,   nil,   nil,
   nil,   nil,   nil,    28,    29,   nil,   nil,   nil,     2,    30,
     9,    10,    11,    22,    23,    24,    25,   nil,    26,    27,
   nil,   nil,   nil,   nil,   nil,    28,    29,   nil,   nil,   nil,
     2,    30,     9,    10,    11,    22,    23,    24,    25,   nil,
    26,    27,   nil,   nil,   nil,   nil,   nil,    28,    29,   nil,
   nil,   nil,   nil,    30,    78,    79,    80,    76,    77,    93,
    92,    81,    83,    82,    84,    85,    86,    89,    91,    90,
    87,    88,    78,    79,    80,    76,    77,    93,    92,    81,
    83,    82,    84,    85,    86,    89,    91,    90,    87,    88,
    78,    79,    80,    76,    77,    93,    92,    81,    83,    82,
    84,    85,    86,    89,    91,    90,    87,    78,    79,    80,
    76,    77,    93,    92,    81,    83,    82,    84,    85,    86,
    89,    91,    90,    78,    79,    80,    76,    77,    93,    92,
    81,    83,    82,    84,    85,    86,    89,    91,    78,    79,
    80,    76,    77,    93,    92,   -79,   -79,   -79,   -79,    78,
    79,    80,    76,    77,    93,    92,   -79,   -79,   -79,   -79,
    78,    79,    80,    76,    77,    93,    92,   -79,   -79,   -79,
   -79,    78,    79,    80,    76,    77,    93,    92,    81,    83,
    82,    84,    78,    79,    80,    76,    77,    93,    92,    81,
    83,    82,    84 ]

racc_action_check = [
    21,    23,    23,    23,    23,     0,   152,     8,     8,     8,
    23,    24,    24,    24,    24,   152,    27,    27,    27,    27,
    24,    42,    42,    42,    42,    27,    43,    43,    43,    43,
    42,    46,    46,    46,    46,    43,    47,    47,    47,    47,
    46,   112,   112,   112,     1,    47,    23,    23,    23,    23,
    23,    21,   113,   113,   113,     3,    24,    24,    24,    24,
    24,    27,    27,    27,    27,    27,    42,    42,    42,    42,
    42,    43,    43,    43,    43,    43,    46,    46,    46,    46,
    46,    47,    47,    47,    47,    47,    48,    48,    48,    48,
     4,    49,    49,    49,    49,    48,    50,    50,    50,    50,
    49,    62,    62,    62,    62,    50,    68,    68,    68,    68,
    62,    73,    73,    73,    73,    68,    76,    76,    76,    76,
    73,    77,    77,    77,    77,    76,   158,   158,     9,    10,
    77,    48,    48,    48,    48,    48,    49,    49,    49,    49,
    49,    50,    50,    50,    50,    50,    62,    62,    62,    62,
    62,    68,    68,    68,    68,    68,    73,    73,    73,    73,
    73,    76,    76,    76,    76,    76,    77,    77,    77,    77,
    77,    78,    78,    78,    78,    11,    79,    79,    79,    79,
    78,    80,    80,    80,    80,    79,    81,    81,    81,    81,
    80,    82,    82,    82,    82,    81,    83,    83,    83,    83,
    82,    84,    84,    84,    84,    83,    85,    85,    85,    85,
    84,    14,    15,    16,    22,    85,    78,    78,    78,    78,
    78,    79,    79,    79,    79,    79,    80,    80,    80,    80,
    80,    81,    81,    81,    81,    81,    82,    82,    82,    82,
    82,    83,    83,    83,    83,    83,    84,    84,    84,    84,
    84,    85,    85,    85,    85,    85,    86,    86,    86,    86,
    25,    87,    87,    87,    87,    86,    88,    88,    88,    88,
    87,    89,    89,    89,    89,    88,    90,    90,    90,    90,
    89,    91,    91,    91,    91,    90,    92,    92,    92,    92,
    91,    93,    93,    93,    93,    92,    26,    29,    35,    36,
    93,    86,    86,    86,    86,    86,    87,    87,    87,    87,
    87,    88,    88,    88,    88,    88,    89,    89,    89,    89,
    89,    90,    90,    90,    90,    90,    91,    91,    91,    91,
    91,    92,    92,    92,    92,    92,    93,    93,    93,    93,
    93,    94,    94,    94,    94,    37,   100,   100,   100,   100,
    94,    51,    63,    65,    69,   100,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,    70,    94,    94,    94,    94,
    94,   100,   100,   100,   100,   100,   128,   128,   128,   128,
   128,    71,    72,   102,   103,   101,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   133,   133,   133,   133,   104,   135,
   135,   135,   135,   133,   138,   138,   138,   138,   135,   142,
   142,   142,   142,   138,   111,   134,   136,   137,   142,   129,
   129,   129,   129,   129,   140,   105,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   133,
   133,   133,   133,   133,   135,   135,   135,   135,   135,   138,
   138,   138,   138,   138,   142,   142,   142,   142,   142,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   150,   150,   150,
   150,   145,   146,   nil,   nil,   nil,   150,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   nil,   nil,   nil,   143,   nil,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   nil,
     2,     2,   150,   150,   150,   150,   150,     2,     2,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   157,    45,    45,    45,
    45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
    45,    45,    45,    45,    45,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   nil,   nil,     6,   nil,   nil,   nil,   nil,
     6,     6,     6,     6,    45,     6,     6,   nil,   nil,   nil,
   nil,   nil,     6,     6,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   141,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   151,    64,    64,    64,    64,    64,
    64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,   nil,   nil,   nil,   nil,   nil,   nil,    75,
   nil,   nil,   nil,   nil,   nil,    64,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,   110,   nil,   nil,   nil,   nil,   nil,
   nil,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   131,
   nil,   nil,   nil,   nil,   nil,   nil,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,    12,   nil,   nil,   nil,   nil,    12,
    12,    12,    12,   nil,    12,    12,   nil,   nil,   nil,   nil,
   nil,    12,    12,   nil,   nil,   nil,    28,    12,    28,    28,
    28,    28,    28,    28,    28,   nil,    28,    28,   nil,   nil,
   nil,   nil,   nil,    28,    28,   nil,   nil,   nil,   132,    28,
   132,   132,   132,   132,   132,   132,   132,   nil,   132,   132,
   nil,   nil,   nil,   nil,   nil,   132,   132,   nil,   nil,   nil,
   144,   132,   144,   144,   144,   144,   144,   144,   144,   nil,
   144,   144,   nil,   nil,   nil,   nil,   nil,   144,   144,   nil,
   nil,   nil,   149,   144,   149,   149,   149,   149,   149,   149,
   149,   nil,   149,   149,   nil,   nil,   nil,   nil,   nil,   149,
   149,   nil,   nil,   nil,   159,   149,   159,   159,   159,   159,
   159,   159,   159,   nil,   159,   159,   nil,   nil,   nil,   nil,
   nil,   159,   159,   nil,   nil,   nil,   161,   159,   161,   161,
   161,   161,   161,   161,   161,   nil,   161,   161,   nil,   nil,
   nil,   nil,   nil,   161,   161,   nil,   nil,   nil,   162,   161,
   162,   162,   162,   162,   162,   162,   162,   nil,   162,   162,
   nil,   nil,   nil,   nil,   nil,   162,   162,   nil,   nil,   nil,
   163,   162,   163,   163,   163,   163,   163,   163,   163,   nil,
   163,   163,   nil,   nil,   nil,   nil,   nil,   163,   163,   nil,
   nil,   nil,   nil,   163,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122 ]

racc_action_pointer = [
   -22,    44,   513,    55,    62,   nil,   578,   nil,   -22,    78,
    79,   125,   737,   nil,   156,   157,   158,   nil,   nil,   nil,
   nil,    -3,   164,    -3,     7,   203,   239,    12,   759,   240,
   nil,   nil,   nil,   nil,   nil,   244,   245,   342,   nil,   nil,
   nil,   nil,    17,    22,   nil,   558,    27,    32,    82,    87,
    92,   348,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    97,   302,   656,   308,   nil,   nil,   102,   299,
   333,   346,   353,   107,   955,   687,   112,   117,   167,   172,
   177,   182,   187,   192,   197,   202,   252,   257,   262,   267,
   272,   277,   282,   287,   337,   nil,   nil,   nil,   nil,   nil,
   342,   347,   348,   354,   371,   397,   nil,   nil,   nil,   nil,
   712,   390,    32,    43,   nil,   nil,   nil,   365,  1039,  1050,
  1061,  1072,  1083,  1008,   991,   447,  1024,   641,   387,   440,
   nil,   737,   781,   420,   405,   425,   400,   393,   430,   nil,
   418,   576,   435,   480,   803,   456,   461,   973,   nil,   825,
   503,   623,   -40,   nil,   nil,   nil,   nil,   508,    84,   847,
   nil,   869,   891,   913,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -79,   -79,   -79,   -79,   -79,    -2,    -5,    -4,    -7,   -79,
   -79,   -79,   -18,   -19,   -79,   -79,   -79,   -23,   -24,   -25,
   -26,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,
   -74,   168,    -1,    -3,    -6,   -12,   -14,   -79,   -17,   -20,
   -21,   -22,   -79,   -79,   -58,   -62,   -79,   -79,   -79,   -79,
   -79,   -50,   -51,   -52,   -53,   -54,   -59,   -75,   -76,   -77,
   -78,   -60,   -79,   -79,   -79,   -79,   -72,   -73,   -79,   -79,
   -79,   -79,   -79,   -79,   -56,   -79,   -79,   -79,   -79,   -79,
   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,   -79,
   -79,   -79,   -79,   -79,   -79,   -45,   -46,   -47,   -48,   -49,
   -79,   -79,   -79,   -79,   -79,   -79,    -8,   -11,    -9,   -13,
   -79,   -79,   -27,   -28,   -29,   -30,   -31,   -32,   -33,   -34,
   -35,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -61,   -79,   -79,   -79,   -79,   -79,   -79,   -16,   -79,   -55,
   -65,   -79,   -79,   -79,   -79,   -79,   -79,   -57,   -63,   -79,
   -79,   -79,   -79,   -70,   -10,   -15,   -64,   -79,   -79,   -79,
   -71,   -79,   -79,   -79,   -69,   -66,   -67,   -68 ]

racc_goto_table = [
    21,    65,     7,     1,    21,     6,    33,    35,    36,    37,
    21,    34,    38,    12,    56,    61,     8,    12,    64,     4,
    44,    69,     8,    12,    71,   145,    21,   107,   109,   155,
   102,   148,   nil,    74,    75,   nil,   nil,    95,    96,    97,
    98,    99,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   101,   nil,   nil,   nil,   nil,   nil,   105,
   nil,    21,   nil,   nil,   110,   nil,   nil,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   nil,   nil,   nil,   nil,
   nil,   131,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   134,   nil,   nil,   nil,   140,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,   nil,   nil,
   nil,   nil,   156,   nil,   141,   nil,   143,   nil,   nil,   147,
    21,   nil,   164,   151,   165,   166,   167,   nil,   nil,   nil,
   nil,   157,    21,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,    21,
    21,    21 ]

racc_goto_check = [
     6,    24,     4,     1,     6,     3,     4,     6,     6,     6,
     6,     3,     4,    14,    23,    23,     5,    14,     9,     2,
     6,     7,     5,    14,     8,    10,     6,    11,    12,    13,
    15,    25,   nil,     9,     9,   nil,   nil,     9,     9,     9,
     9,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,     9,
   nil,     6,   nil,   nil,     9,   nil,   nil,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,    23,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,
   nil,   nil,    24,   nil,     9,   nil,     9,   nil,   nil,     9,
     6,   nil,    24,     9,    24,    24,    24,   nil,   nil,   nil,
   nil,     9,     6,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,     6,
     6,     6 ]

racc_goto_pointer = [
   nil,     3,    17,     3,     0,    14,    -2,   -14,   -12,    -9,
  -112,   -43,   -44,  -117,    11,   -33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    -9,   -27,  -109 ]

racc_goto_default = [
   nil,    13,   nil,   nil,   nil,    67,    51,   nil,   nil,    45,
   nil,    52,    53,    54,    66,    14,    15,    16,    17,    18,
    19,    20,    55,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 60, :_reduce_1,
  2, 60, :_reduce_2,
  2, 61, :_reduce_3,
  1, 61, :_reduce_4,
  1, 61, :_reduce_5,
  2, 62, :_reduce_6,
  1, 62, :_reduce_7,
  4, 64, :_reduce_8,
  4, 64, :_reduce_9,
  7, 64, :_reduce_10,
  2, 66, :_reduce_11,
  0, 66, :_reduce_12,
  2, 67, :_reduce_13,
  0, 67, :_reduce_14,
  2, 69, :_reduce_15,
  0, 69, :_reduce_16,
  2, 63, :_reduce_17,
  1, 63, :_reduce_18,
  1, 73, :_reduce_19,
  2, 73, :_reduce_20,
  2, 73, :_reduce_21,
  2, 73, :_reduce_22,
  1, 73, :_reduce_23,
  1, 73, :_reduce_24,
  1, 73, :_reduce_25,
  1, 73, :_reduce_26,
  3, 68, :_reduce_27,
  3, 68, :_reduce_28,
  3, 68, :_reduce_29,
  3, 68, :_reduce_30,
  3, 68, :_reduce_31,
  3, 68, :_reduce_32,
  3, 68, :_reduce_33,
  3, 68, :_reduce_34,
  3, 68, :_reduce_35,
  3, 68, :_reduce_36,
  3, 68, :_reduce_37,
  3, 68, :_reduce_38,
  3, 68, :_reduce_39,
  3, 68, :_reduce_40,
  3, 68, :_reduce_41,
  3, 68, :_reduce_42,
  3, 68, :_reduce_43,
  3, 68, :_reduce_44,
  2, 68, :_reduce_45,
  2, 68, :_reduce_46,
  2, 68, :_reduce_47,
  2, 68, :_reduce_48,
  2, 68, :_reduce_49,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  4, 68, :_reduce_55,
  3, 74, :_reduce_56,
  6, 74, :_reduce_57,
  2, 75, :_reduce_58,
  2, 76, :_reduce_59,
  2, 76, :_reduce_60,
  3, 82, :_reduce_61,
  1, 82, :_reduce_62,
  6, 77, :_reduce_63,
  2, 84, :_reduce_64,
  0, 84, :_reduce_65,
  9, 78, :_reduce_66,
  9, 79, :_reduce_67,
  9, 79, :_reduce_68,
  8, 80, :_reduce_69,
  6, 80, :_reduce_70,
  7, 80, :_reduce_71,
  1, 83, :_reduce_72,
  1, 83, :_reduce_73,
  1, 65, :_reduce_74,
  1, 70, :_reduce_75,
  1, 71, :_reduce_76,
  1, 72, :_reduce_77,
  1, 81, :_reduce_78 ]

racc_reduce_n = 79

racc_shift_n = 168

racc_token_table = {
  false => 0,
  :error => 1,
  "RIGHTBRACKET" => 2,
  "LEFTBRACKET" => 3,
  "NOT" => 4,
  "NOTBITS" => 5,
  "DOLLAR" => 6,
  "AT" => 7,
  "UMINUS" => 8,
  "PRODUCT" => 9,
  "DIVISION" => 10,
  "MODULE" => 11,
  "PLUS" => 12,
  "MINUS" => 13,
  "LEFTDISPLACEMENT" => 14,
  "RIGHTDISPLACEMENT" => 15,
  "LESSTHAN" => 16,
  "LESSOREQUALTHAN" => 17,
  "MORETHAN" => 18,
  "MOREOREQUALTHAN" => 19,
  "EQUALS" => 20,
  "NOTEQUAL" => 21,
  "ANDBITS" => 22,
  "XORBITS" => 23,
  "ORBITS" => 24,
  "AND" => 25,
  "OR" => 26,
  "BEGIN" => 27,
  "END" => 28,
  "INT" => 29,
  "BOOL" => 30,
  "BITS" => 31,
  "INPUT" => 32,
  "OUTPUT" => 33,
  "OUTPUTLN" => 34,
  "IF" => 35,
  "ELSE" => 36,
  "FOR" => 37,
  "FORBITS" => 38,
  "AS" => 39,
  "FROM" => 40,
  "GOING" => 41,
  "HIGHER" => 42,
  "LOWER" => 43,
  "REPEAT" => 44,
  "WHILE" => 45,
  "DO" => 46,
  "TRUE" => 47,
  "FALSE" => 48,
  "BOOLEAN" => 49,
  "IDENTIFIER" => 50,
  "BITARRAY" => 51,
  "INTEGER" => 52,
  "STRING" => 53,
  "ASSIGN" => 54,
  "SEMICOLON" => 55,
  "COMMA" => 56,
  "LEFTPARENTHESIS" => 57,
  "RIGHTPARENTHESIS" => 58 }

racc_nt_base = 59

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"RIGHTBRACKET\"",
  "\"LEFTBRACKET\"",
  "\"NOT\"",
  "\"NOTBITS\"",
  "\"DOLLAR\"",
  "\"AT\"",
  "\"UMINUS\"",
  "\"PRODUCT\"",
  "\"DIVISION\"",
  "\"MODULE\"",
  "\"PLUS\"",
  "\"MINUS\"",
  "\"LEFTDISPLACEMENT\"",
  "\"RIGHTDISPLACEMENT\"",
  "\"LESSTHAN\"",
  "\"LESSOREQUALTHAN\"",
  "\"MORETHAN\"",
  "\"MOREOREQUALTHAN\"",
  "\"EQUALS\"",
  "\"NOTEQUAL\"",
  "\"ANDBITS\"",
  "\"XORBITS\"",
  "\"ORBITS\"",
  "\"AND\"",
  "\"OR\"",
  "\"BEGIN\"",
  "\"END\"",
  "\"INT\"",
  "\"BOOL\"",
  "\"BITS\"",
  "\"INPUT\"",
  "\"OUTPUT\"",
  "\"OUTPUTLN\"",
  "\"IF\"",
  "\"ELSE\"",
  "\"FOR\"",
  "\"FORBITS\"",
  "\"AS\"",
  "\"FROM\"",
  "\"GOING\"",
  "\"HIGHER\"",
  "\"LOWER\"",
  "\"REPEAT\"",
  "\"WHILE\"",
  "\"DO\"",
  "\"TRUE\"",
  "\"FALSE\"",
  "\"BOOLEAN\"",
  "\"IDENTIFIER\"",
  "\"BITARRAY\"",
  "\"INTEGER\"",
  "\"STRING\"",
  "\"ASSIGN\"",
  "\"SEMICOLON\"",
  "\"COMMA\"",
  "\"LEFTPARENTHESIS\"",
  "\"RIGHTPARENTHESIS\"",
  "$start",
  "S",
  "bloquePrincipal",
  "declaraciones",
  "instrucciones",
  "declaracion",
  "identificador",
  "initInt",
  "initBool",
  "expresion",
  "initBits",
  "entero",
  "booleano",
  "arregloBits",
  "instruccion",
  "asignacion",
  "entrada",
  "salida",
  "condicional",
  "iteracionFor",
  "iteracionForBits",
  "iteracionWhile",
  "cadena",
  "expMultiple",
  "instruccionDeclaracion",
  "clausuraElse" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'Parser.y', 49)
  def _reduce_1(val, _values, result)
    result = NodoInicial.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 50)
  def _reduce_2(val, _values, result)
    result = NodoInicial.new(nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 54)
  def _reduce_3(val, _values, result)
    result = NodoBloquePrincipal.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 55)
  def _reduce_4(val, _values, result)
    result = NodoBloquePrincipal.new(nil, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 56)
  def _reduce_5(val, _values, result)
    result = NodoBloquePrincipal.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 60)
  def _reduce_6(val, _values, result)
    result = NodoDeclaraciones.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 61)
  def _reduce_7(val, _values, result)
    result = NodoDeclaraciones.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 65)
  def _reduce_8(val, _values, result)
    result = NodoDeclaracion.new(val[0], val[1], nil, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 66)
  def _reduce_9(val, _values, result)
    result = NodoDeclaracion.new(val[0], val[1], nil, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 67)
  def _reduce_10(val, _values, result)
    result = NodoDeclaracion.new(val[0], val[1], val[3], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 71)
  def _reduce_11(val, _values, result)
    result = NodoInit.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 72)
  def _reduce_12(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 76)
  def _reduce_13(val, _values, result)
    result = NodoInit.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 77)
  def _reduce_14(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 81)
  def _reduce_15(val, _values, result)
    result = NodoInit.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 82)
  def _reduce_16(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 86)
  def _reduce_17(val, _values, result)
    result = NodoInstrucciones.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 87)
  def _reduce_18(val, _values, result)
    result = NodoInstrucciones.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 91)
  def _reduce_19(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 92)
  def _reduce_20(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 93)
  def _reduce_21(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 94)
  def _reduce_22(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 95)
  def _reduce_23(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 96)
  def _reduce_24(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 97)
  def _reduce_25(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 98)
  def _reduce_26(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 102)
  def _reduce_27(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 103)
  def _reduce_28(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 104)
  def _reduce_29(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 105)
  def _reduce_30(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 106)
  def _reduce_31(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 107)
  def _reduce_32(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 108)
  def _reduce_33(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 109)
  def _reduce_34(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 110)
  def _reduce_35(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 111)
  def _reduce_36(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 112)
  def _reduce_37(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 113)
  def _reduce_38(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 114)
  def _reduce_39(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 115)
  def _reduce_40(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 116)
  def _reduce_41(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 117)
  def _reduce_42(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 118)
  def _reduce_43(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 119)
  def _reduce_44(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 120)
  def _reduce_45(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 121)
  def _reduce_46(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 122)
  def _reduce_47(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 123)
  def _reduce_48(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 124)
  def _reduce_49(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'Parser.y', 130)
  def _reduce_55(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new('ACCESS'), val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 134)
  def _reduce_56(val, _values, result)
    result = NodoAsignacion.new(val[0], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 135)
  def _reduce_57(val, _values, result)
    result = NodoAsignacion.new(val[0], val[5], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 139)
  def _reduce_58(val, _values, result)
    result = NodoEntrada.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 143)
  def _reduce_59(val, _values, result)
    result = NodoSalida.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 144)
  def _reduce_60(val, _values, result)
    result = NodoSalida.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 148)
  def _reduce_61(val, _values, result)
    result = NodoExpMultiple.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 149)
  def _reduce_62(val, _values, result)
    result = NodoExpMultiple.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 153)
  def _reduce_63(val, _values, result)
    result = NodoCondicional.new(val[2], val[4], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 157)
  def _reduce_64(val, _values, result)
    result = NodoClausuraElse.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 158)
  def _reduce_65(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 162)
  def _reduce_66(val, _values, result)
    result = NodoFor.new(val[2], val[4], val[6], val[8])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 166)
  def _reduce_67(val, _values, result)
    result = NodoForBits.new(val[1], val[3], val[5], val[7], val[8])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 167)
  def _reduce_68(val, _values, result)
    result = NodoForBits.new(val[1], val[3], val[5], val[7], val[8])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 171)
  def _reduce_69(val, _values, result)
    result = NodoWhile.new(val[0], val[1], val[4], val[6], val[7])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 172)
  def _reduce_70(val, _values, result)
    result = NodoWhile.new(nil, nil, val[2], val[4], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 173)
  def _reduce_71(val, _values, result)
    result = NodoWhile.new(val[0], val[1], val[4], nil, nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 177)
  def _reduce_72(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 178)
  def _reduce_73(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 182)
  def _reduce_74(val, _values, result)
    result = NodoId.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 186)
  def _reduce_75(val, _values, result)
    result = NodoInt.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 190)
  def _reduce_76(val, _values, result)
    result = NodoBool.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 194)
  def _reduce_77(val, _values, result)
    result = NodoBits.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 198)
  def _reduce_78(val, _values, result)
    result = NodoStr.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


