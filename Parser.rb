#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "Lexer.rb"
require_relative "astParser.rb"

class SyntacticError < RuntimeError

    def initialize(token)
        @token = token
    end

    def to_s
        puts "SYNTACTIC ERROR FOUND:"
        if @token.eql? "$" then
            puts "Unexpected EOF"
        else
            puts "ERROR: unexpected token '#{@token.str}' at line #{@token.line}, column #{@token.column}"   
        end    
    end
end


class Parser < Racc::Parser

module_eval(<<'...end Parser.y/module_eval...', 'Parser.y', 227)

def initialize(lexer)
    @lexer = lexer
end

def on_error(id, token, stack)
	SyntacticError.new(token).to_s
	exit
    #raise SyntacticError::new(token)
end

def next_token
    if @lexer.haySiguiente then
        token = @lexer.tokenSiguiente;
        return [token.type, token]
    else
        return nil
    end
end

def parse
    do_parse
end


...end Parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    81,    24,    25,    26,    23,    56,    57,    58,    54,    55,
    22,    56,    57,    58,    54,    55,    71,    70,    59,    61,
    60,    62,    63,    64,     2,     5,     9,    10,    11,    32,
    33,    34,    35,     2,    36,    37,    24,    25,    26,    23,
     3,    38,    39,   159,   160,    22,    42,    40,    43,    41,
    44,    82,    56,    57,    58,    54,    55,    45,    46,     2,
     9,    10,    11,    40,    32,    33,    34,    35,    40,    36,
    37,    24,    25,    26,    23,    40,    38,    39,    72,    73,
    22,    42,    40,    43,    41,    44,    24,    25,    26,    23,
    56,    57,    58,    74,     2,    22,    56,    57,    58,    32,
    33,    34,    35,    40,    36,    37,    24,    25,    26,    23,
    87,    38,    39,    88,    93,    22,    42,    40,    43,    41,
    44,    24,    25,    26,    23,    95,    97,    98,    81,    40,
    22,    42,    40,    43,    41,    44,    24,    25,    26,    23,
   124,    24,    25,    26,    23,    22,   126,    41,   128,    42,
    22,    42,    40,    43,    41,    44,    24,    25,    26,    23,
    41,    82,   134,    40,   136,    22,    42,    40,    43,    41,
    44,    24,    25,    26,    23,   138,   141,   143,   145,   147,
    22,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    24,    25,    26,    23,   152,    43,   157,   nil,   nil,
    22,    42,    40,    43,    41,    44,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    42,    40,    43,    41,
    44,    24,    25,    26,    23,   nil,    24,    25,    26,    23,
    22,   nil,   nil,   nil,   nil,    22,    42,    40,    43,    41,
    44,   nil,   nil,   nil,     2,   nil,     9,    10,    11,    32,
    33,    34,    35,   nil,    36,    37,    24,    25,    26,    23,
   nil,    38,    39,   nil,   nil,    22,    42,    40,    43,    41,
    44,    42,    40,    43,    41,    44,    24,    25,    26,    23,
   nil,    24,    25,    26,    23,    22,    24,    25,    26,    23,
    22,    24,    25,    26,    23,    22,   nil,   nil,   nil,   nil,
    22,    42,    40,    43,    41,    44,    24,    25,    26,    23,
   nil,    24,    25,    26,    23,    22,   nil,   nil,   nil,   nil,
    22,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    24,    25,    26,    23,   nil,   nil,   nil,   nil,   nil,
    22,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    24,    25,    26,    23,   nil,    24,    25,    26,    23,
    22,    24,    25,    26,    23,    22,    24,    25,    26,    23,
    22,   nil,   nil,   nil,   nil,    22,    42,    40,    43,    41,
    44,    24,    25,    26,    23,   nil,    24,    25,    26,    23,
    22,   nil,   nil,   nil,   nil,    22,    42,    40,    43,    41,
    44,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    42,    40,    43,    41,    44,    24,    25,    26,    23,
   nil,   nil,   nil,   nil,   nil,    22,    42,    40,    43,    41,
    44,    42,    40,    43,    41,    44,    24,    25,    26,    23,
   nil,    24,    25,    26,    23,    22,    24,    25,    26,    23,
    22,    24,    25,    26,    23,    22,   nil,   nil,   nil,   nil,
    22,    42,    40,    43,    41,    44,    24,    25,    26,    23,
   nil,    24,    25,    26,    23,    22,   nil,   nil,   nil,   nil,
    22,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    24,    25,    26,    23,   nil,   nil,   nil,   nil,   nil,
    22,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    56,    57,    58,    54,    55,    71,    70,    59,    61,
    60,    62,    63,    64,    67,    69,    68,    65,    66,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    42,    40,    43,    41,
    44,    56,    57,    58,    54,    55,    71,    70,    59,    61,
    60,    62,    63,    64,    67,    69,    68,    65,    66,   nil,
   133,   nil,   nil,   nil,   nil,   nil,    24,    25,    26,    23,
   nil,    24,    25,    26,    23,    22,    24,    25,    26,    23,
    22,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,     2,
   137,     9,    10,    11,    32,    33,    34,    35,   nil,    36,
    37,    24,    25,    26,    23,   nil,    38,    39,   nil,   nil,
    22,    42,    40,    43,    41,    44,    42,    40,    43,    41,
    44,    42,    40,    43,    41,    44,    56,    57,    58,    54,
    55,    71,    70,    59,    61,    60,    62,    63,    64,    67,
    69,    68,    65,    66,   nil,   nil,    42,    40,    43,    41,
    44,    24,    25,    26,    23,   nil,    24,    25,    26,    23,
    22,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   150,     9,    10,    11,    32,
    33,    34,    35,   nil,    36,    37,    24,    25,    26,    23,
   nil,    38,    39,   nil,   nil,    22,    42,    40,    43,    41,
    44,    42,    40,    43,    41,    44,   nil,   nil,   nil,     2,
   nil,     9,    10,    11,    32,    33,    34,    35,   nil,    36,
    37,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,   nil,
   nil,    42,    40,    43,    41,    44,    56,    57,    58,    54,
    55,    71,    70,    59,    61,    60,    62,    63,    64,    67,
    69,    68,    65,    66,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,    25,    26,    23,   nil,   nil,   nil,   nil,   nil,
    22,    56,    57,    58,    54,    55,    71,    70,   -78,   -78,
   -78,   -78,   nil,   nil,     2,   158,     9,    10,    11,    32,
    33,    34,    35,   nil,    36,    37,    24,    25,    26,    23,
   nil,    38,    39,   nil,   nil,    22,    42,    40,    43,    41,
    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     9,    10,    11,    32,    33,    34,    35,   nil,    36,
    37,    24,    25,    26,    23,   nil,    38,    39,   nil,   nil,
    22,    42,    40,    43,    41,    44,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,     9,    10,    11,    32,
    33,    34,    35,   nil,    36,    37,    24,    25,    26,    23,
   nil,    38,    39,   nil,   nil,    22,    42,    40,    43,    41,
    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     9,    10,    11,    32,    33,    34,    35,   nil,    36,
    37,   nil,   nil,   nil,   nil,   nil,    38,    39,   nil,   nil,
   nil,    42,    40,    43,    41,    44,    56,    57,    58,    54,
    55,    71,    70,    59,    61,    60,    62,    63,    64,    67,
    69,    68,    65,    66,    56,    57,    58,    54,    55,    71,
    70,    59,    61,    60,    62,    63,    64,    67,    69,    68,
    65,    66,    56,    57,    58,    54,    55,    71,    70,   -78,
   -78,   -78,   -78,   119,    56,    57,    58,    54,    55,    71,
    70,    59,    61,    60,    62,    63,    64,    67,    69,    68,
    53,    56,    57,    58,    54,    55,    71,    70,    59,    61,
    60,    62,    63,    64,    67,    69,    68,    65,    66,    56,
    57,    58,    54,    55,    71,    70,    59,    61,    60,    62,
    63,    64,    67,    69,    68,    65,    66,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,   nil,   nil,
   nil,   156,    56,    57,    58,    54,    55,    71,    70,    59,
    61,    60,    62,    63,    64,    67,    69,    68,    65,    66,
   nil,   nil,   nil,   nil,   nil,   nil,   131,   nil,   nil,   nil,
   nil,   nil,   123,    56,    57,    58,    54,    55,    71,    70,
    59,    61,    60,    62,    63,    64,    67,    69,    68,    65,
    66,    56,    57,    58,    54,    55,    71,    70,    59,    61,
    60,    62,    63,    64,    67,    69,    68,    65,    66,    56,
    57,    58,    54,    55,    71,    70,    59,    61,    60,    62,
    63,    64,    67,    69,    68,    65,    56,    57,    58,    54,
    55,    71,    70,    59,    61,    60,    62,    63,    64,    67,
    69,    56,    57,    58,    54,    55,    71,    70,    59,    61,
    60,    62,    63,    64,    67,    56,    57,    58,    54,    55,
    71,    70,   -78,   -78,   -78,   -78,    56,    57,    58,    54,
    55,    71,    70,   -78,   -78,   -78,   -78,    56,    57,    58,
    54,    55,    71,    70,    59,    61,    60,    62,    56,    57,
    58,    54,    55,    71,    70,    59,    61,    60,    62 ]

racc_action_check = [
    27,     2,     2,     2,     2,   115,   115,   115,   115,   115,
     2,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     0,     2,     2,     6,     6,     6,     6,
     1,     2,     2,   156,   156,     6,     2,     2,     2,     2,
     2,    27,   116,   116,   116,   116,   116,     3,     4,     6,
     8,     8,     8,     9,     6,     6,     6,     6,    10,     6,
     6,    12,    12,    12,    12,    11,     6,     6,    15,    16,
    12,     6,     6,     6,     6,     6,    22,    22,    22,    22,
    99,    99,    99,    17,    12,    22,   100,   100,   100,    12,
    12,    12,    12,    32,    12,    12,    23,    23,    23,    23,
    35,    12,    12,    36,    39,    23,    12,    12,    12,    12,
    12,    24,    24,    24,    24,    49,    50,    51,    76,    88,
    24,    22,    22,    22,    22,    22,    25,    25,    25,    25,
    90,    26,    26,    26,    26,    25,    94,    95,    96,    97,
    26,    23,    23,    23,    23,    23,    33,    33,    33,    33,
    98,   121,   122,   123,   124,    33,    24,    24,    24,    24,
    24,    34,    34,    34,    34,   130,   135,   137,   138,   139,
    34,    25,    25,    25,    25,    25,    26,    26,    26,    26,
    26,    37,    37,    37,    37,   144,   145,   150,   nil,   nil,
    37,    33,    33,    33,    33,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    34,    34,    34,    34,
    34,    38,    38,    38,    38,   nil,    54,    54,    54,    54,
    38,   nil,   nil,   nil,   nil,    54,    37,    37,    37,    37,
    37,   nil,   nil,   nil,    38,   nil,    38,    38,    38,    38,
    38,    38,    38,   nil,    38,    38,    55,    55,    55,    55,
   nil,    38,    38,   nil,   nil,    55,    38,    38,    38,    38,
    38,    54,    54,    54,    54,    54,    56,    56,    56,    56,
   nil,    57,    57,    57,    57,    56,    58,    58,    58,    58,
    57,    59,    59,    59,    59,    58,   nil,   nil,   nil,   nil,
    59,    55,    55,    55,    55,    55,    60,    60,    60,    60,
   nil,    61,    61,    61,    61,    60,   nil,   nil,   nil,   nil,
    61,    56,    56,    56,    56,    56,    57,    57,    57,    57,
    57,    58,    58,    58,    58,    58,    59,    59,    59,    59,
    59,    62,    62,    62,    62,   nil,   nil,   nil,   nil,   nil,
    62,    60,    60,    60,    60,    60,    61,    61,    61,    61,
    61,    63,    63,    63,    63,   nil,    64,    64,    64,    64,
    63,    65,    65,    65,    65,    64,    66,    66,    66,    66,
    65,   nil,   nil,   nil,   nil,    66,    62,    62,    62,    62,
    62,    67,    67,    67,    67,   nil,    68,    68,    68,    68,
    67,   nil,   nil,   nil,   nil,    68,    63,    63,    63,    63,
    63,    64,    64,    64,    64,    64,    65,    65,    65,    65,
    65,    66,    66,    66,    66,    66,    69,    69,    69,    69,
   nil,   nil,   nil,   nil,   nil,    69,    67,    67,    67,    67,
    67,    68,    68,    68,    68,    68,    70,    70,    70,    70,
   nil,    71,    71,    71,    71,    70,    81,    81,    81,    81,
    71,    82,    82,    82,    82,    81,   nil,   nil,   nil,   nil,
    82,    69,    69,    69,    69,    69,    87,    87,    87,    87,
   nil,    93,    93,    93,    93,    87,   nil,   nil,   nil,   nil,
    93,    70,    70,    70,    70,    70,    71,    71,    71,    71,
    71,    81,    81,    81,    81,    81,    82,    82,    82,    82,
    82,   119,   119,   119,   119,   nil,   nil,   nil,   nil,   nil,
   119,    87,    87,    87,    87,    87,    93,    93,    93,    93,
    93,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   119,   119,   119,   119,
   119,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   nil,
   120,   nil,   nil,   nil,   nil,   nil,   133,   133,   133,   133,
   nil,   134,   134,   134,   134,   133,   136,   136,   136,   136,
   134,   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,   133,
   125,   133,   133,   133,   133,   133,   133,   133,   nil,   133,
   133,   141,   141,   141,   141,   nil,   133,   133,   nil,   nil,
   141,   133,   133,   133,   133,   133,   134,   134,   134,   134,
   134,   136,   136,   136,   136,   136,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   nil,   nil,   141,   141,   141,   141,
   141,   143,   143,   143,   143,   nil,   148,   148,   148,   148,
   143,   nil,   nil,   nil,   nil,   148,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   143,   142,   143,   143,   143,   143,
   143,   143,   143,   nil,   143,   143,   147,   147,   147,   147,
   nil,   143,   143,   nil,   nil,   147,   143,   143,   143,   143,
   143,   148,   148,   148,   148,   148,   nil,   nil,   nil,   147,
   nil,   147,   147,   147,   147,   147,   147,   147,   nil,   147,
   147,   nil,   nil,   nil,   nil,   nil,   147,   147,   nil,   nil,
   nil,   147,   147,   147,   147,   147,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   157,   157,   157,   157,   nil,   nil,   nil,   nil,   nil,
   157,   104,   104,   104,   104,   104,   104,   104,   104,   104,
   104,   104,   nil,   nil,   157,   155,   157,   157,   157,   157,
   157,   157,   157,   nil,   157,   157,   158,   158,   158,   158,
   nil,   157,   157,   nil,   nil,   158,   157,   157,   157,   157,
   157,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   158,
   nil,   158,   158,   158,   158,   158,   158,   158,   nil,   158,
   158,   159,   159,   159,   159,   nil,   158,   158,   nil,   nil,
   159,   158,   158,   158,   158,   158,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   159,   nil,   159,   159,   159,   159,
   159,   159,   159,   nil,   159,   159,   160,   160,   160,   160,
   nil,   159,   159,   nil,   nil,   160,   159,   159,   159,   159,
   159,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   160,
   nil,   160,   160,   160,   160,   160,   160,   160,   nil,   160,
   160,   nil,   nil,   nil,   nil,   nil,   160,   160,   nil,   nil,
   nil,   160,   160,   160,   160,   160,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    14,    14,    14,    14,    14,    14,
    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
    14,    14,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,    84,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
    14,   140,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   140,   nil,   nil,
   nil,   149,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
   nil,   nil,   nil,   nil,   nil,   nil,   117,   nil,   nil,   nil,
   nil,   nil,    89,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   106,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   106,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   108,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109 ]

racc_action_pointer = [
     6,    40,    -3,    57,    30,   nil,    32,   nil,    31,    13,
    18,    25,    67,   nil,   945,    23,    24,    38,   nil,   nil,
   nil,   nil,    82,   102,   117,   132,   137,    -3,   nil,   nil,
   nil,   nil,    53,   152,   167,    53,    56,   187,   217,    57,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    71,
    72,   124,   nil,   nil,   222,   252,   272,   277,   282,   287,
   302,   307,   337,   357,   362,   367,   372,   387,   392,   422,
   442,   447,   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,
   nil,   452,   457,   nil,   927,   nil,   nil,   472,    79,  1043,
    95,   nil,   nil,   477,    91,    95,    93,   100,   108,    81,
    87,   nil,   nil,   nil,   782,   963,  1156,  1167,  1178,  1189,
   975,  1110,     2,  1127,  1142,    -4,    43,  1074,  1092,   507,
   522,   107,   107,   113,   107,   552,   nil,   nil,   nil,   nil,
   173,   nil,   nil,   582,   587,   136,   592,   131,   124,   143,
   992,   617,   637,   667,   140,   145,   nil,   702,   672,  1010,
   151,   nil,   nil,   nil,   nil,   747,     1,   777,   812,   847,
   882,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -78,   -78,   -78,   -78,   -78,    -2,   -78,    -4,    -6,   -78,
   -78,   -78,   -17,   -18,   -78,   -78,   -78,   -78,   -23,   -24,
   -25,   -26,   -78,   -78,   -78,   -78,   -78,   -50,   -51,   -52,
   -53,   -54,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,
   -73,   -74,   -75,   -76,   -77,   165,    -1,    -3,    -5,   -11,
   -13,   -78,   -16,   -19,   -78,   -78,   -78,   -78,   -78,   -78,
   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,   -78,
   -78,   -78,   -20,   -21,   -22,   -45,   -50,   -46,   -47,   -48,
   -49,   -78,   -78,   -57,   -61,   -58,   -59,   -78,   -78,   -78,
   -78,   -71,   -72,   -78,   -78,   -78,   -78,   -78,   -78,   -27,
   -28,   -29,   -30,   -31,   -32,   -33,   -34,   -35,   -36,   -37,
   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -78,   -56,   -78,
   -78,   -78,   -78,   -78,   -78,   -78,    -7,   -10,    -8,   -12,
   -78,   -55,   -60,   -78,   -78,   -78,   -78,   -78,   -15,   -64,
   -78,   -78,   -78,   -78,   -78,   -78,   -62,   -78,   -78,   -78,
   -70,   -69,    -9,   -14,   -63,   -78,   -78,   -78,   -78,   -78,
   -78,   -68,   -65,   -66,   -67 ]

racc_goto_table = [
    27,    85,    86,   127,    27,     1,   130,    49,    50,    51,
    27,    75,    77,    78,    79,    80,     4,    94,    96,   144,
   129,     7,    84,    84,    12,    47,    89,    90,    12,     6,
    83,    52,     8,   153,    12,    48,    27,   122,     8,   146,
   nil,   nil,   nil,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   117,   118,   nil,   nil,   nil,   nil,   120,   nil,   nil,   nil,
   nil,   nil,   125,   nil,   nil,   nil,   121,   132,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   135,   139,   140,   nil,   142,   nil,   nil,   nil,   nil,
   149,    27,   151,   nil,   nil,   nil,   154,   155,   nil,   nil,
   nil,    27,   nil,   nil,   nil,    27,   161,   162,   163,   164,
   nil,   nil,   nil,   nil,   nil,    27,    27,    27,    27 ]

racc_goto_check = [
     6,    23,    23,     9,     6,     1,     9,     6,     6,     6,
     6,    14,    14,    14,    14,    14,     2,     7,     8,    10,
    11,     4,    14,    14,    13,     4,    14,    24,    13,     3,
     6,     4,     5,    12,    13,     3,     6,    15,     5,    25,
   nil,   nil,   nil,    14,    14,    14,    14,    14,    14,    14,
    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,    14,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,
   nil,   nil,    14,   nil,   nil,   nil,     6,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,    24,    14,   nil,    14,   nil,   nil,   nil,   nil,
    14,     6,    24,   nil,   nil,   nil,    24,    14,   nil,   nil,
   nil,     6,   nil,   nil,   nil,     6,    24,    24,    24,    24,
   nil,   nil,   nil,   nil,   nil,     6,     6,     6,     6 ]

racc_goto_pointer = [
   nil,     5,    14,    27,    19,    30,    -2,   -32,   -32,   -92,
  -119,   -77,  -112,    22,   -11,   -51,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -32,   -11,  -100 ]

racc_goto_default = [
   nil,    13,   nil,   nil,   nil,    92,    76,   nil,   nil,    28,
   nil,    29,    30,    91,    14,    15,    16,    17,    18,    19,
    20,    21,    31,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 60, :_reduce_1,
  2, 60, :_reduce_2,
  2, 61, :_reduce_3,
  1, 61, :_reduce_4,
  2, 62, :_reduce_5,
  1, 62, :_reduce_6,
  4, 64, :_reduce_7,
  4, 64, :_reduce_8,
  7, 64, :_reduce_9,
  2, 66, :_reduce_10,
  0, 66, :_reduce_11,
  2, 67, :_reduce_12,
  0, 67, :_reduce_13,
  2, 69, :_reduce_14,
  0, 69, :_reduce_15,
  2, 63, :_reduce_16,
  1, 63, :_reduce_17,
  1, 72, :_reduce_18,
  2, 72, :_reduce_19,
  2, 72, :_reduce_20,
  2, 72, :_reduce_21,
  2, 72, :_reduce_22,
  1, 72, :_reduce_23,
  1, 72, :_reduce_24,
  1, 72, :_reduce_25,
  1, 72, :_reduce_26,
  3, 73, :_reduce_27,
  3, 73, :_reduce_28,
  3, 73, :_reduce_29,
  3, 73, :_reduce_30,
  3, 73, :_reduce_31,
  3, 73, :_reduce_32,
  3, 73, :_reduce_33,
  3, 73, :_reduce_34,
  3, 73, :_reduce_35,
  3, 73, :_reduce_36,
  3, 73, :_reduce_37,
  3, 73, :_reduce_38,
  3, 73, :_reduce_39,
  3, 73, :_reduce_40,
  3, 73, :_reduce_41,
  3, 73, :_reduce_42,
  3, 73, :_reduce_43,
  3, 73, :_reduce_44,
  2, 73, :_reduce_45,
  2, 73, :_reduce_46,
  2, 73, :_reduce_47,
  2, 73, :_reduce_48,
  2, 73, :_reduce_49,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  4, 73, :_reduce_55,
  3, 74, :_reduce_56,
  2, 75, :_reduce_57,
  2, 76, :_reduce_58,
  2, 76, :_reduce_59,
  3, 82, :_reduce_60,
  1, 82, :_reduce_61,
  6, 77, :_reduce_62,
  2, 84, :_reduce_63,
  0, 84, :_reduce_64,
  9, 78, :_reduce_65,
  9, 79, :_reduce_66,
  9, 79, :_reduce_67,
  8, 80, :_reduce_68,
  6, 80, :_reduce_69,
  6, 80, :_reduce_70,
  1, 83, :_reduce_71,
  1, 83, :_reduce_72,
  1, 65, :_reduce_73,
  1, 68, :_reduce_74,
  1, 70, :_reduce_75,
  1, 71, :_reduce_76,
  1, 81, :_reduce_77 ]

racc_reduce_n = 78

racc_shift_n = 165

racc_token_table = {
  false => 0,
  :error => 1,
  "RIGHTBRACKET" => 2,
  "LEFTBRACKET" => 3,
  "NOT" => 4,
  "NOTBITS" => 5,
  "DOLLAR" => 6,
  "AT" => 7,
  "UMINUS" => 8,
  "PRODUCT" => 9,
  "DIVISION" => 10,
  "MODULE" => 11,
  "PLUS" => 12,
  "MINUS" => 13,
  "LEFTDISPLACEMENT" => 14,
  "RIGHTDISPLACEMENT" => 15,
  "LESSTHAN" => 16,
  "LESSOREQUALTHAN" => 17,
  "MORETHAN" => 18,
  "MOREOREQUALTHAN" => 19,
  "EQUALS" => 20,
  "NOTEQUAL" => 21,
  "ANDBITS" => 22,
  "XORBITS" => 23,
  "ORBITS" => 24,
  "AND" => 25,
  "OR" => 26,
  "BEGIN" => 27,
  "END" => 28,
  "INT" => 29,
  "BOOL" => 30,
  "BITS" => 31,
  "INPUT" => 32,
  "OUTPUT" => 33,
  "OUTPUTLN" => 34,
  "IF" => 35,
  "ELSE" => 36,
  "FOR" => 37,
  "FORBITS" => 38,
  "AS" => 39,
  "FROM" => 40,
  "GOING" => 41,
  "HIGHER" => 42,
  "LOWER" => 43,
  "REPEAT" => 44,
  "WHILE" => 45,
  "DO" => 46,
  "TRUE" => 47,
  "FALSE" => 48,
  "BOOLEAN" => 49,
  "IDENTIFIER" => 50,
  "BITARRAY" => 51,
  "INTEGER" => 52,
  "STRING" => 53,
  "ASSIGN" => 54,
  "SEMICOLON" => 55,
  "COMMA" => 56,
  "LEFTPARENTHESIS" => 57,
  "RIGHTPARENTHESIS" => 58 }

racc_nt_base = 59

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"RIGHTBRACKET\"",
  "\"LEFTBRACKET\"",
  "\"NOT\"",
  "\"NOTBITS\"",
  "\"DOLLAR\"",
  "\"AT\"",
  "\"UMINUS\"",
  "\"PRODUCT\"",
  "\"DIVISION\"",
  "\"MODULE\"",
  "\"PLUS\"",
  "\"MINUS\"",
  "\"LEFTDISPLACEMENT\"",
  "\"RIGHTDISPLACEMENT\"",
  "\"LESSTHAN\"",
  "\"LESSOREQUALTHAN\"",
  "\"MORETHAN\"",
  "\"MOREOREQUALTHAN\"",
  "\"EQUALS\"",
  "\"NOTEQUAL\"",
  "\"ANDBITS\"",
  "\"XORBITS\"",
  "\"ORBITS\"",
  "\"AND\"",
  "\"OR\"",
  "\"BEGIN\"",
  "\"END\"",
  "\"INT\"",
  "\"BOOL\"",
  "\"BITS\"",
  "\"INPUT\"",
  "\"OUTPUT\"",
  "\"OUTPUTLN\"",
  "\"IF\"",
  "\"ELSE\"",
  "\"FOR\"",
  "\"FORBITS\"",
  "\"AS\"",
  "\"FROM\"",
  "\"GOING\"",
  "\"HIGHER\"",
  "\"LOWER\"",
  "\"REPEAT\"",
  "\"WHILE\"",
  "\"DO\"",
  "\"TRUE\"",
  "\"FALSE\"",
  "\"BOOLEAN\"",
  "\"IDENTIFIER\"",
  "\"BITARRAY\"",
  "\"INTEGER\"",
  "\"STRING\"",
  "\"ASSIGN\"",
  "\"SEMICOLON\"",
  "\"COMMA\"",
  "\"LEFTPARENTHESIS\"",
  "\"RIGHTPARENTHESIS\"",
  "$start",
  "S",
  "bloquePrincipal",
  "declaraciones",
  "instrucciones",
  "declaracion",
  "identificador",
  "initInt",
  "initBool",
  "entero",
  "initBits",
  "booleano",
  "arregloBits",
  "instruccion",
  "expresion",
  "asignacion",
  "entrada",
  "salida",
  "condicional",
  "iteracionFor",
  "iteracionForBits",
  "iteracionWhile",
  "cadena",
  "expMultiple",
  "instruccionDeclaracion",
  "clausuraElse" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'Parser.y', 49)
  def _reduce_1(val, _values, result)
    result = NodoInicial.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 50)
  def _reduce_2(val, _values, result)
    result = NodoInicial.new(nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 54)
  def _reduce_3(val, _values, result)
    result = NodoBloquePrincipal.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 55)
  def _reduce_4(val, _values, result)
    result = NodoBloquePrincipal.new(nil, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 59)
  def _reduce_5(val, _values, result)
    result = NodoDeclaraciones.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 60)
  def _reduce_6(val, _values, result)
    result = NodoDeclaraciones.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 64)
  def _reduce_7(val, _values, result)
    result = NodoDeclaracion.new(val[0], val[1], nil, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 65)
  def _reduce_8(val, _values, result)
    result = NodoDeclaracion.new(val[0], val[1], nil, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 66)
  def _reduce_9(val, _values, result)
    result = NodoDeclaracion.new(val[0], val[1], val[3], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 70)
  def _reduce_10(val, _values, result)
    result = NodoInit.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 71)
  def _reduce_11(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 75)
  def _reduce_12(val, _values, result)
    result = NodoInit.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 76)
  def _reduce_13(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 80)
  def _reduce_14(val, _values, result)
    result = NodoInit.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 81)
  def _reduce_15(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 85)
  def _reduce_16(val, _values, result)
    result = NodoInstrucciones.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 86)
  def _reduce_17(val, _values, result)
    result = NodoInstrucciones.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 90)
  def _reduce_18(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 91)
  def _reduce_19(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 92)
  def _reduce_20(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 93)
  def _reduce_21(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 94)
  def _reduce_22(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 95)
  def _reduce_23(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 96)
  def _reduce_24(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 97)
  def _reduce_25(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 98)
  def _reduce_26(val, _values, result)
    result = NodoInstruccion.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 102)
  def _reduce_27(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 103)
  def _reduce_28(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 104)
  def _reduce_29(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 105)
  def _reduce_30(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 106)
  def _reduce_31(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 107)
  def _reduce_32(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 108)
  def _reduce_33(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 109)
  def _reduce_34(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 110)
  def _reduce_35(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 111)
  def _reduce_36(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 112)
  def _reduce_37(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 113)
  def _reduce_38(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 114)
  def _reduce_39(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 115)
  def _reduce_40(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 116)
  def _reduce_41(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 117)
  def _reduce_42(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 118)
  def _reduce_43(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 119)
  def _reduce_44(val, _values, result)
    result = NodoExpresionBin.new(val[0], NodoOperador.new(val[1]), val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 120)
  def _reduce_45(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 121)
  def _reduce_46(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 122)
  def _reduce_47(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 123)
  def _reduce_48(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 124)
  def _reduce_49(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new(val[0]), val[1], nil)
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'Parser.y', 130)
  def _reduce_55(val, _values, result)
    result = NodoExpresionUn.new(NodoOperador.new('ACCESS'), val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 134)
  def _reduce_56(val, _values, result)
    result = NodoAsignacion.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 138)
  def _reduce_57(val, _values, result)
    result = NodoEntrada.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 142)
  def _reduce_58(val, _values, result)
    result = NodoSalida.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 143)
  def _reduce_59(val, _values, result)
    result = NodoSalida.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 147)
  def _reduce_60(val, _values, result)
    result = NodoExpMultiple.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 148)
  def _reduce_61(val, _values, result)
    result = NodoExpMultiple.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 152)
  def _reduce_62(val, _values, result)
    result = NodoFor.new(val[2], val[4], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 156)
  def _reduce_63(val, _values, result)
    result = NodoClausuraElse.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 157)
  def _reduce_64(val, _values, result)
    result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 161)
  def _reduce_65(val, _values, result)
    result = NodoFor.new(val[2], val[4], val[6], val[8])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 165)
  def _reduce_66(val, _values, result)
    result = NodoForBits.new(val[1], val[3], val[5], val[7], val[8])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 166)
  def _reduce_67(val, _values, result)
    result = NodoForBits.new(val[1], val[3], val[5], val[7], val[8])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 170)
  def _reduce_68(val, _values, result)
    result = NodoWhile.new(val[0], val[1], val[4], val[6], val[7])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 171)
  def _reduce_69(val, _values, result)
    result = NodoWhile.new(nil, nil, val[2], val[4], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 172)
  def _reduce_70(val, _values, result)
    result = NodoWhile.new(val[0], val[1], val[4], nil, nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 176)
  def _reduce_71(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 177)
  def _reduce_72(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 181)
  def _reduce_73(val, _values, result)
    result = NodoId.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 185)
  def _reduce_74(val, _values, result)
    result = NodoInt.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 189)
  def _reduce_75(val, _values, result)
    result = NodoBool.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 193)
  def _reduce_76(val, _values, result)
    result = NodoBits.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 197)
  def _reduce_77(val, _values, result)
    result = NodoStr.new(val[0])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


